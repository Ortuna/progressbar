{"name":"Progressbar","tagline":"Clone of http://0xcc.net/ruby-progressbar/index.html.en","body":"## ProgressBar: A Text Progress Bar Library for Ruby\r\n[![Build Status](https://travis-ci.org/market76/progressbar.png?branch=master)](https://travis-ci.org/market76/progressbar)\r\n\r\nRuby/ProgressBar is a text progress bar library for Ruby.\r\nIt can indicate progress with percentage, a progress bar,\r\nand estimated remaining time.\r\n\r\n### Examples\r\n\r\n```\r\n\r\n  % irb --simple-prompt -r progressbar\r\n  >> pbar = ProgressBar.new(\"test\", 100)\r\n  => (ProgressBar: 0/100)\r\n  >> 100.times {sleep(0.1); pbar.inc}; pbar.finish\r\n  test:          100% |........................................| Time: 00:00:10\r\n  => nil\r\n\r\n  >> pbar = ProgressBar.new(\"test\", 100)\r\n  => (ProgressBar: 0/100)\r\n  >> (1..100).each{|x| sleep(0.1); pbar.set(x)}; pbar.finish\r\n  test:           67% |..........................              | ETA:  00:00:03\r\n  \r\n  >> ProgressBar.new(\"test\", 100) do |pbar|\r\n  >>   100.times { sleep(0.1); pbar.inc }\r\n  >> end\r\n  test:          100% |........................................| Time: 00:00:10\r\n  \r\n```\r\n  \r\n### Usage\r\n```ruby\r\nProgressBar#new (title, total, out = STDERR, &block)\r\n```\r\n    \r\nDisplay the initial progress bar and return a\r\nProgressBar object.  ((|title|)) specifies the title,\r\nand ((|total|)) specifies the total cost of processing.\r\nOptional parameter ((|out|)) specifies the output IO.\r\n\r\nThe display of the progress bar is updated when one or\r\nmore percent is proceeded or one or more seconds are\r\nelapsed from the previous display.\r\n\r\nIt also accepts a block in case you prefer not needing\r\nto .finish the bar (see example above).\r\n\r\n```ruby\r\nProgressBar#inc (step = 1)\r\n```\r\n\r\nIncrease the internal counter by ((|step|)) and update\r\nthe display of the progress bar. Display the estimated\r\nremaining time on the right side of the bar. The counter\r\ndoes not go beyond the ((|total|)).\r\n\r\n```ruby\r\nProgressBar#set (count)\r\n```\r\n\r\nSet the internal counter to ((|count|)) and update the\r\ndisplay of the progress bar. Display the estimated\r\nremaining time on the right side of the bar.  Raise if\r\n((|count|)) is a negative number or a number more than\r\nthe ((|total|)).\r\n\r\n\r\n```ruby\r\nProgressBar#finish\r\n```\r\n\r\nStop the progress bar and update the display of progress\r\nbar. Display the elapsed time on the right side of the bar.\r\nThe progress bar always stops at 100 % by the method.\r\n\r\n```ruby\r\nProgressBar#halt\r\n```\r\n\r\nStop the progress bar and update the display of progress\r\nbar. Display the elapsed time on the right side of the bar.\r\nThe progress bar stops at the current percentage by the method.\r\n\r\n```ruby\r\nProgressBar#format=\r\n```\r\n\r\nSet the format for displaying a progress bar.\r\nDefault: \"%-14s %3d%% %s %s\".\r\n\r\n```ruby\r\nProgressBar#format_arguments=\r\n```\r\n\r\nSet the methods for displaying a progress bar.\r\nDefault: [:title, :percentage, :bar, :stat].\r\n\r\n```ruby\r\nProgressBar#file_transfer_mode\r\n```\r\n\r\nUse  :stat_for_file_transfer instead of :stat to display\r\ntransfered bytes and transfer rate.\r\n\r\n```ruby\r\nProgressBar#long_running\r\n```\r\n\r\nUse adaptative running average to compute ETA, more effective for\r\nlong-running jobs or jobs whose speed may vary.\r\n\r\n\r\nReverseProgressBar class is also available.  The\r\nfunctionality is identical to ProgressBar but the direction\r\nof the progress bar is just opposite.\r\n\r\n### Limitations\r\n\r\nSince the progress is calculated by the proportion to the\r\ntotal cost of processing, Ruby/ProgressBar cannot be used if\r\nthe total cost of processing is unknown in advance.\r\nMoreover, the estimation of remaining time cannot be\r\naccurately performed if the progress does not flow uniformly.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}